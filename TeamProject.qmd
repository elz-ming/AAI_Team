---
title: "Singapore Ridership Analysis, by Team 12"
author: 
  - "Chua Zong Han Lionel"
  - "Lin Zhenming"
  - "Nurul Shaidah Binti Mohamed Shaib"
  - "Poh Weh Lin"
  - "Tamo Cholo Rafael Tandoc"
  
date: 2025-03-11
date-format: "dddd MMM DD, YYYY"

format: 
  html:
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 2
---

# Step 0 : Setting up
## 0.1 : Importing Libraries
```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

library(tidyverse)
library(knitr)
library(readxl)
library(tidyquant)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(gt)
library(dplyr)

```

## 0.2 : Importing Data
### Dataset 1 : Monthly Data
This dataset entails monthly ridership for every month of the year, for 5 years (2019 to 2024)
```{r}
#| eval: true
#| echo: false

# Load the monthly data from the CSV file
monthly_data <- read_csv("Data/monthly_ave_daily_pt_ridership.csv", show_col_types = FALSE) |>
  as_tibble()

# Get first 10 rows of data
monthly_data_top10 <- monthly_data |> head(10)

# Define a function to render monthly data
style_table <- function(data, title = "Styled Table", subtitle = NULL, footnote = NULL) {
  data |>
    gt() |>
    tab_header(
      title = title,
      subtitle = subtitle
    ) |>
    fmt_number(
      columns = where(is.numeric),
      decimals = 2
    ) |>
    # Apply bold, centered text, light blue fill, and borders to column labels
    tab_style(
      style = list(
        cell_text(weight = "bold", align = "center"), # Center-align headers
        cell_fill(color = "lightblue") # Light blue fill
      ),
      locations = cells_column_labels()
    ) |>
    # Explicitly add borders to column labels
    tab_style(
      style = cell_borders(
        sides = c("left", "right", "top", "bottom"), # Apply borders to all sides
        color = "black",
        weight = px(1) # Increase border weight for better visibility
      ),
      locations = cells_column_labels()
    ) |>
    # Apply borders to body cells
    tab_style(
      style = cell_borders(
        sides = c("left", "right", "top", "bottom"),
        color = "black",
        weight = px(1)
      ),
      locations = cells_body()
    ) |>
    # Center-align text in body cells
    tab_style(
      style = cell_text(align = "center"),
      locations = cells_body()
    ) |>
    # Left-align text in footnotes
    tab_style(
      style = cell_text(align = "left"),
      locations = cells_footnotes()
    ) |>
    # Set table options
    tab_options(
      table.font.size = px(14),
      column_labels.font.size = px(16),
      table.width = pct(100),
      table.border.top.style = "solid", # Ensure top border is visible
      table.border.bottom.style = "solid" # Ensure bottom border is visible
    ) |>
    # Add footnote
    tab_footnote(
      footnote = footnote,
      locations = cells_title(groups = "title")
    ) |>
    # Apply top border to footnotes
    tab_style(
      style = cell_borders(
        sides = c("top"),
        color = "black",
        weight = px(1)
      ),
      locations = cells_footnotes()
    )
}

# Apply the styling function to the monthly data
styled_monthly_table <- style_table(
  data = monthly_data_top10,
  title = "Monthly Average Daily Public Transport Ridership",
  subtitle = "Top 10 Rows",
  footnote = "Data sourced from Land Transport Authority (LTA)"
)

# Display the styled table
styled_monthly_table
```


### Dataset 2 : Yearly Data
This dataset entails yearly ridership for for 33 years (1990 to 2023)
```{r}
#| eval: true
#| echo: false

# Load the yearly data from the CSV file
yearly_data <- read_csv("Data/PublicTransportOperationAndRidershipAnnual.csv", show_col_types=FALSE) |>
  as_tibble()


styled_yearly_table <- style_table(
  data = yearly_data,
  title = md("Yearly Public Transport Ridership and Operation Data"),
  subtitle = md("_All Rows_"),
  footnote = "Data sourced from Singapore Department of Statistics"
) |>
  tab_options(
    table.align = "left",  
    heading.align = "left"  
  ) |>
  tab_style(
    style = cell_text(align = "left"),  
    locations = cells_title(groups = c("title", "subtitle"))
  )


# Display the styled table
styled_yearly_table
```

# Step 1 : Data Cleaning and Engineering

## Cleaning Monthly Data

- **Splitting "month" Column into Separate "Month" and "Year" Columns**
  - The **"month"** column contains combined **month-year** values (e.g., `Jan-19`).
  - This step **separates** the **month** and **year** into two distinct columns to facilitate time-based analysis.

```{r}
#| eval: true
#| echo: true

monthly_data <- monthly_data |>
  separate(month, into = c("month", "year"), sep = "-", convert = TRUE) |>
  mutate(
    year = as.numeric(ifelse(year < 100, 2000 + year, year))
  ) |>
  arrange(year, match(month, month.abb), mode)

kable(head(monthly_data))
```

## Cleaning Yearly Data
- **Transpose Table for Better Readability and Analysis**
  - Convert dataset from **wide** to **long** format.
  - Extract the **first row as column names** and remove it.
  - Convert **Year column** to numeric.
```{r}
#| eval: true
#| echo: true

yearly_data <- t(yearly_data)
yearly_data <- as.data.frame(yearly_data)
colnames(yearly_data) <- yearly_data[1, ]
yearly_data <- yearly_data[-1, ]
yearly_data$Year <- as.numeric(rownames(yearly_data))
```

- **Filter Data from 2018 Onwards and Reorganize Columns**
  - Remove records before **2018** to deal with missing data.
  - Reset row names and relocate **Year column** to the first position.
```{r}
#| eval: true
#| echo: true

yearly_data <- yearly_data[yearly_data$Year >= 2018, ]
rownames(yearly_data) <- NULL
yearly_data <- yearly_data |> relocate(Year, .before = everything())
yearly_data <- yearly_data |> rename(`Average Daily Trip - P2P` = `Average Daily Trip - Point-To-Point (P2P) Transport (Taxis And Private Hire Cars)`)
```

- **Convert Ridership Data and MRT/LRT km Operated Data from Thousands to Actual Values**
  - Multiply relevant columns by **1000**.
```{r}
#| eval: true
#| echo: true

# Identify columns to multiply by 1000
columns_to_multiply <- c("MRT km Operated", 
                         "LRT km Operated",
                         "Average Daily Ridership - MRT", 
                         "Average Daily Ridership - LRT", 
                         "Average Daily Ridership - Public Bus", 
                         "Average Daily Trip - P2P")

# Convert these columns to numeric and multiply by 1000
for (col in columns_to_multiply) {
  yearly_data[[col]] <- as.numeric(yearly_data[[col]]) * 1000
}

# Convert character columns to numeric
yearly_data <- yearly_data %>%
  mutate(across(where(is.character), as.numeric))

kable(head(yearly_data))

```

# Step 2 : Generate the Improved Visualization
## 1.1 Old Visualization
::: {#fig1 style="text-align: center;"}
![Figure 1: Original Visualization from the Straits Times (2025)](Data/figure_2.png){width=70%}
:::

## 2.2 Improved Visualization
```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

# Create a sparkline with a dotted vertical line at the lowest value
sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - MRT`)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "red", size = 2) +
  geom_text(aes(label = ifelse(Year == min(Year), 
                               paste(`Average Daily Ridership - MRT`), 
                               ifelse(Year == max(Year), 
                                      paste(`Average Daily Ridership - MRT`), 
                                      ""))),
            vjust = -1, color = "black", size = 4) +
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - MRT`)],
             linetype = "solid", color = "red") + # Add dotted line at lowest value
  geom_text(aes(x = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - MRT`)], 
                y = min(yearly_data$`Average Daily Ridership - MRT`), 
                label = paste(round(min(yearly_data$`Average Daily Ridership - MRT`), 2))),
            vjust = -1, hjust = 0.5, color = "black", size = 4) + # Annotate the lowest value
  theme_minimal() +
  labs(title = "Sparkline: MRT Average Daily Ridership per Year",
       x = "Year",
       y = "Ridership") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 12),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

# Display the sparkline
sparkline
```

## 2.3 Improved Visualization Yearly
```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
# Create sparklines for MRT, Bus, and LRT with start, end, and lowest point values
mrt_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - MRT`)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - MRT`),
             color = "#003838", size = 3) +

  # Annotate the start value
  geom_text(aes(x = min(Year), 
                y = yearly_data$`Average Daily Ridership - MRT`[which.min(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - MRT`[which.min(Year)])),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  # Annotate the end value
  geom_text(aes(x = max(Year), 
                y = yearly_data$`Average Daily Ridership - MRT`[which.max(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - MRT`[which.max(Year)])),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  # Add a vertical line and annotate the lowest value
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - MRT`)],
             linetype = "dotted", color = "red") +
  geom_text(aes(x = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - MRT`)],
                y = min(yearly_data$`Average Daily Ridership - MRT`),
                label = paste(round(min(yearly_data$`Average Daily Ridership - MRT`), 2))),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

# Similarly update sparklines for Bus and LRT
bus_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - Public Bus`)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - Public Bus`),
             color = "#003838", size = 3) +
  geom_text(aes(x = min(Year), 
                y = yearly_data$`Average Daily Ridership - Public Bus`[which.min(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - Public Bus`[which.min(Year)])),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  geom_text(aes(x = max(Year), 
                y = yearly_data$`Average Daily Ridership - Public Bus`[which.max(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - Public Bus`[which.max(Year)])),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - Public Bus`)],
             linetype = "dotted", color = "red") +
  geom_text(aes(x = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - Public Bus`)],
                y = min(yearly_data$`Average Daily Ridership - Public Bus`),
                label = paste(round(min(yearly_data$`Average Daily Ridership - Public Bus`), 2))),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

lrt_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - LRT`)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - LRT`),
             color = "#003838", size = 3) +
  geom_text(aes(x = min(Year), 
                y = yearly_data$`Average Daily Ridership - LRT`[which.min(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - LRT`[which.min(Year)])),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  geom_text(aes(x = max(Year), 
                y = yearly_data$`Average Daily Ridership - LRT`[which.max(Year)], 
                label = paste(yearly_data$`Average Daily Ridership - LRT`[which.max(Year)])),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - LRT`)],
             linetype = "dotted", color = "red") +
  geom_text(aes(x = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - LRT`)],
                y = min(yearly_data$`Average Daily Ridership - LRT`),
                label = paste(round(min(yearly_data$`Average Daily Ridership - LRT`), 2))),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

# Save sparklines as images
ggsave("mrt_sparkline.png", plot = mrt_sparkline, width = 8, height = 2, dpi = 300)
ggsave("bus_sparkline.png", plot = bus_sparkline, width = 8, height = 2, dpi = 300)
ggsave("lrt_sparkline.png", plot = lrt_sparkline, width = 8, height = 2, dpi = 300)

# Prepare data for the table
travel_data <- data.frame(
  Transport = c("MRT", "Bus", "LRT"),
  Trend = c("mrt_sparkline.png", "bus_sparkline.png", "lrt_sparkline.png")
)

# Create a table with properly scaled sparklines
travel_table <- gt(travel_data) |>
  text_transform(
    locations = cells_body(columns = "Trend"),
    fn = function(x) {
      map(x, ~ paste0("<img src='", ., "' style='width:100%; height:auto;'>")) # Scale to full width
    }
  ) |>
  cols_label(
    Transport = "Transport Mode",
    Trend = "Trend (Sparkline)"
  ) |>
  tab_header(title = "Public Transport Trends") |>
  tab_options(
    table.width = pct(100),  # Ensure table takes full width of the page
    table.align = "center"
  )

# Display the table
travel_table
```

```{r}
# Overlay sparklines for MRT, Bus, and LRT
overlay_sparklines <- ggplot() +
  # MRT
  geom_line(data = yearly_data, aes(x = Year, y = `Average Daily Ridership - MRT`),
            color = "#008b8b", alpha = 0.7, size = 1) + # Slight transparency
  # Bus
  geom_line(data = yearly_data, aes(x = Year, y = `Average Daily Ridership - Public Bus`),
            color = "#FFA07A", alpha = 0.7, size = 1) + # Slight transparency with salmon color
  # LRT
  geom_line(data = yearly_data, aes(x = Year, y = `Average Daily Ridership - LRT`),
            color = "#6A5ACD", alpha = 0.7, size = 1) + # Slight transparency with slate blue color
  # Add labels and aesthetics
  theme_minimal() +
  labs(title = "Overlay of Public Transport Trends",
       x = "Year",
       y = "Average Daily Ridership") +
  theme(plot.title = element_text(hjust = 0.5, size = 14))


# Display the overlay sparklines
overlay_sparklines
```

```{r}
# Add scaled columns for MRT, Bus, and LRT (because plotting them all on the same graph hides the trends of smaller values)
yearly_data <- yearly_data %>%
  mutate(
    MRT_scaled = (`Average Daily Ridership - MRT` - min(`Average Daily Ridership - MRT`)) /
                 (max(`Average Daily Ridership - MRT`) - min(`Average Daily Ridership - MRT`)),
    Bus_scaled = (`Average Daily Ridership - Public Bus` - min(`Average Daily Ridership - Public Bus`)) /
                 (max(`Average Daily Ridership - Public Bus`) - min(`Average Daily Ridership - Public Bus`)),
    LRT_scaled = (`Average Daily Ridership - LRT` - min(`Average Daily Ridership - LRT`)) /
                 (max(`Average Daily Ridership - LRT`) - min(`Average Daily Ridership - LRT`))
  )

overlay_sparklines_scaled <- ggplot(yearly_data, aes(x = Year)) +
  geom_line(aes(y = MRT_scaled, color = "MRT"), size = 1, alpha = 0.8) +
  geom_line(aes(y = Bus_scaled, color = "Bus"), size = 1, alpha = 0.8) +
  geom_line(aes(y = LRT_scaled, color = "LRT"), size = 1, alpha = 0.8) +
  scale_color_manual(values = c("MRT" = "#008b8b", "Bus" = "#FFA07A", "LRT" = "#6A5ACD")) +
  labs(title = "Normalized Public Transport Trends",
       x = "Year",
       y = "Normalized Ridership",
       color = "Transport Mode") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14))

overlay_sparklines_scaled
```

```{r}
library(magick)

# Create sparklines for MRT, Bus, and LRT with start, end, and lowest point values
mrt_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - MRT`)) +
  geom_line(color = "#2d3333", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - MRT`),
             color = "#003838", size = 3) +
  # Add a vertical line and annotate the lowest value
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - MRT`)],
             linetype = "dotted", color = "red") +
  # indicate this line belongs to mrt
  geom_text(data = yearly_data |> filter(Year == min(Year)),
            aes(x = Year, y = `Average Daily Ridership - MRT`, label = "MRT"),
            vjust = 4, hjust = -0.1, color = "#2d3333", size = 4) +
  theme_void()

# Similarly update sparklines for Bus and LRT
bus_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - Public Bus`)) +
  geom_line(color = "#708080", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - Public Bus`),
             color = "#003838", size = 3) +
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - Public Bus`)],
             linetype = "dotted", color = "red") +
  # indicate this line belongs to bus
  geom_text(data = yearly_data |> filter(Year == min(Year)),
            aes(x = Year, y = `Average Daily Ridership - Public Bus`, label = "Bus"),
            vjust = 3, hjust = -0.1, color = "#708080", size = 4) +
    theme_void()

lrt_sparkline <- ggplot(yearly_data, aes(x = Year, y = `Average Daily Ridership - LRT`)) +
  geom_line(color = "#b3cccc", size = 1) +
  geom_point(data = yearly_data |> filter(Year == min(Year) | Year == max(Year)),
             aes(x = Year, y = `Average Daily Ridership - LRT`),
             color = "#003838", size = 3) +
  geom_vline(xintercept = yearly_data$Year[which.min(yearly_data$`Average Daily Ridership - LRT`)],
             linetype = "dotted", color = "red") +
  # indicate this line belongs to lrt
  geom_text(data = yearly_data |> filter(Year == min(Year)),
            aes(x = Year, y = `Average Daily Ridership - LRT`, label = "LRT"),
            vjust = 4, hjust = -0.1, color = "#b3cccc", size = 4) +
    theme_void()

# Save sparklines as images
ggsave("mrt_sparkline_forcomb.png", plot = mrt_sparkline, width = 8, height = 2, dpi = 300)
ggsave("bus_sparkline_forcomb.png", plot = bus_sparkline, width = 8, height = 2, dpi = 300)
ggsave("lrt_sparkline_forcomb.png", plot = lrt_sparkline, width = 8, height = 2, dpi = 300)

# Read images
mrt_img <- image_read("mrt_sparkline_forcomb.png")
bus_img <- image_read("bus_sparkline_forcomb.png")
lrt_img <- image_read("lrt_sparkline_forcomb.png")

# Combine the images
combined_img <- image_composite(image_composite(mrt_img, bus_img, operator = "over"),
                                 lrt_img, operator = "over")

# Save the final overlay image
image_write(combined_img, path = "overlay_sparklines_combined.png", format = "png")

# Display the final overlay image
combined_img
```

```{r}

# Create a date column from the month and year columns (assuming month is abbreviated, e.g. "Jan")
monthly_data <- monthly_data %>%
  mutate(date = as.Date(paste(year, month, "01", sep = "-"), format = "%Y-%b-%d"))

# ---------------------------
# MRT Sparkline using Monthly Data
# ---------------------------
monthly_data <- monthly_data %>% filter(!is.na(date))
mrt_data <- monthly_data %>% filter(mode == "MRT")

mrt_sparkline <- ggplot(mrt_data, aes(x = date, y = ridership)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = mrt_data %>% filter(date == min(date) | date == max(date)),
             aes(x = date, y = ridership),
             color = "#003838", size = 3) +
  # Annotate the start value
  geom_text(data = mrt_data %>% filter(date == min(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  # Annotate the end value
  geom_text(data = mrt_data %>% filter(date == max(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  # Add a vertical line and annotate the lowest value
  geom_vline(xintercept = mrt_data$date[which.min(mrt_data$ridership)],
             linetype = "dotted", color = "red") +
  geom_text(data = mrt_data %>% filter(date == mrt_data$date[which.min(mrt_data$ridership)]),
            aes(x = date, y = ridership, label = round(ridership, 2)),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

# ---------------------------
# Bus Sparkline using Monthly Data
# ---------------------------
bus_data <- monthly_data %>% filter(mode == "Public Bus")

bus_sparkline <- ggplot(bus_data, aes(x = date, y = ridership)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = bus_data %>% filter(date == min(date) | date == max(date)),
             aes(x = date, y = ridership),
             color = "#003838", size = 3) +
  geom_text(data = bus_data %>% filter(date == min(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  geom_text(data = bus_data %>% filter(date == max(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  geom_vline(xintercept = bus_data$date[which.min(bus_data$ridership)],
             linetype = "dotted", color = "red") +
  geom_text(data = bus_data %>% filter(date == bus_data$date[which.min(bus_data$ridership)]),
            aes(x = date, y = ridership, label = round(ridership, 2)),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

# ---------------------------
# LRT Sparkline using Monthly Data
# ---------------------------
lrt_data <- monthly_data %>% filter(mode == "LRT")

lrt_sparkline <- ggplot(lrt_data, aes(x = date, y = ridership)) +
  geom_line(color = "#008b8b", size = 1) +
  geom_point(data = lrt_data %>% filter(date == min(date) | date == max(date)),
             aes(x = date, y = ridership),
             color = "#003838", size = 3) +
  geom_text(data = lrt_data %>% filter(date == min(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = 1.5, hjust = -0.1, color = "#4D4D4D", size = 4) +
  geom_text(data = lrt_data %>% filter(date == max(date)),
            aes(x = date, y = ridership, label = ridership),
            vjust = -1, hjust = 1.1, color = "#4D4D4D", size = 4) +
  geom_vline(xintercept = lrt_data$date[which.min(lrt_data$ridership)],
             linetype = "dotted", color = "red") +
  geom_text(data = lrt_data %>% filter(date == lrt_data$date[which.min(lrt_data$ridership)]),
            aes(x = date, y = ridership, label = round(ridership, 2)),
            vjust = -2, hjust = -0.1, color = "#4D4D4D", size = 4) +
  theme_void()

# ---------------------------
# Save sparklines as images
# ---------------------------
ggsave("mrt_sparkline2.png", plot = mrt_sparkline, width = 8, height = 2, dpi = 300)
ggsave("bus_sparkline2.png", plot = bus_sparkline, width = 8, height = 2, dpi = 300)
ggsave("lrt_sparkline2.png", plot = lrt_sparkline, width = 8, height = 2, dpi = 300)

# ---------------------------
# Prepare and Display the Table with Sparklines
# ---------------------------
travel_data <- data.frame(
  Transport = c("MRT", "Bus", "LRT"),
  Trend = c("mrt_sparkline2.png", "bus_sparkline2.png", "lrt_sparkline2.png")
)

travel_table <- gt(travel_data) %>%
  text_transform(
    locations = cells_body(columns = "Trend"),
    fn = function(x) {
      map(x, ~ paste0("<img src='", ., "' style='width:100%; height:auto;'>"))
    }
  ) %>%
  cols_label(
    Transport = "Transport Mode",
    Trend = "Trend (Sparkline)"
  ) %>%
  tab_header(title = "Public Transport Trends (Monthly Data)") %>%
  tab_options(
    table.width = pct(100),
    table.align = "center"
  )

# Display the table
travel_table


```

# Step 3 : Data Analysis
## 3.1 Monthly Ridership Analysis

```{r}
library(ggplot2)
library(dplyr)
library(scales)  # for comma formatting

# Filter and prepare the data
compare_all_years <- monthly_data %>%
  filter(year >= 2019)

compare_all_years$month <- factor(compare_all_years$month,
                                  levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

compare_summary_all <- compare_all_years %>%
  group_by(year, month) %>%
  summarise(total_ridership = sum(ridership, na.rm = TRUE), .groups = "drop")

# Plot with y-axis in numeric format
ggplot(compare_summary_all, aes(x = month, y = total_ridership, color = factor(year), group = year)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 3) +
  labs(
    title = "Monthly Public Transport Ridership (2019–2023)",
    x = "Month",
    y = "Total Ridership",
    color = "Year"
  ) +
  scale_y_continuous(labels = comma) +  
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    plot.title = element_text(face = "bold", hjust = 0.5)
  )


```



Findings:

**1. Analysis of monthly ridership reveals strong alignment with major real-life events:**

a) **First significant dip** observed in April to June 2020, which aligns with Singapore’s Circuit Breaker period during the initial wave of COVID-19 restrictions.

b) **Second dip** occurs between May to July 2021, corresponding with Singapore reverting to Phase 2 (Heightened Alert) due to the Delta variant outbreak.

These drops are not random but coincide with periods of restricted movement, remote working, and school closures.

**2. Seasonal Effects and Monthly Trends**

June and December has the lowest ridership aligning with school holidays when fewer students commute.Ridership patterns align with Singapore’s school and work calendar, where demand drops during school holidays (June, December).

**3. Year-over-Year Ridership Trends**

Comparing 2019 (pre-COVID) and 2023 (post-COVID), ridership in 2023 remains slightly lower despite improvements in transport infrastructure.

This suggests lasting lifestyle shifts, such as hybrid work, remote learning, and flexible commuting patterns, have reduced the need for daily travel. Lifestyle changes brought by the pandemic continue to influence public transport usage, even as services recover and expand.




## 3.2 Infrastructure Expansion Correlation
```{r}
#| eval: true
#| echo: true

# TODO 5: Data analysis using yearly data
```

## 3.3 Impact of Alternative Transport Modes
```{r}
#| eval: true
#| echo: true

# Select only the relevant columns
selected_data <- yearly_data %>%
  select(`Average Daily Ridership - MRT`, 
         `Average Daily Ridership - LRT`, 
         `Average Daily Ridership - Public Bus`, 
         `Average Daily Trip - P2P`)

# Compute correlation matrix
cor_matrix <- cor(selected_data, use = "complete.obs")

ggcorrplot(cor_matrix, 
           lab = TRUE,
           hc.order = TRUE,
           lab_size = 5,        
           colors = c("red", "white", "blue")) +
  ggtitle("Correlation Matrix of Public Transport Usage")

```

## 3.4 Time Series Analysis
```{r}
#| eval: true
#| echo: true

# TODO 7: Data analysis using monthly data
```

