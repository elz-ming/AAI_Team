---
title: "Week 10 Lab: Applications of Tidyverse Skills"
from: markdown+emoji
subtitle: AAI1001 -- Data Engineering and Visualization<br>AY24/25 Tri 2 (Assisted by GenAI)<br>Exercise 5 (Teamwork 2)
author:  
  name: Team [Insert your Team ID]
  affiliations: Singapore Institute of Technology
date: 2025-03-11
date-format: "dddd MMM D, YYYY"
format: 
  html: 
    toc: true
    toc-depth: 1
    toc-location: left
    number-sections: true
    number-depth: 3
    embed-resources: true
    html-table-processing: none
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(gt)
```


# Converting Football Scores into a League Table (30%)


## Generating a League Table
```{r}
epl_results <- read_csv("epl_results.csv", show_col_types=FALSE) |>
  as_tibble()

epl_teams <- read_csv("epl_teams.csv", show_col_types=FALSE) |>
  as_tibble()
```


## Improving the Visualization Using gt Functions



# Finding and Visualizing a Real-World Data Set (30%)


## Explanation of the Data Set


## Validation of Conditions C, D, and E


## Generating a Scatter Plot Using `geom_point()`


## Producing and Discussing Two Distinct Plots Designed to Mitigate Overplotting


## Creating Two Distinct Smoothing Interpolations



# Visualizing Michelsonâ€™s Speed-of-Light Measurements (25%)
```{r}
data(morley)
morley <- as_tibble(morley)
morley
```


## Converting the `Expt` Column to a Factor
```{r}
# Load necessary libraries
library(dplyr)
library(tibble)

# Load the morley dataset
data(morley)

# Convert the dataset to a tibble
morley <- as_tibble(morley)

# Convert the Expt column to a factor
morley <- morley |>
  mutate(Expt = as.factor(Expt))

# Display the updated tibble
print(morley)
```


## Scatter Plot: Experiment Number versus Measured Speeds
```{r}
# Ensure Expt is a factor
morley <- morley |>
  mutate(Expt = as.factor(Expt))

# Create the scatter plot using ggplot2
scatter_plot <- morley |>
  ggplot(aes(x = Speed, y = Expt)) +
  geom_point(size = 3, alpha = 0.7, color = "blue") +  # Customize point size, transparency, and color
  labs(
    title = "Scatter Plot of Michelson's Speed-of-Light Measurements",
    x = "Speed (km/s minus 299,000)",
    y = "Experiment Number",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the scatter plot
print(scatter_plot)
```


## Creating a Box Plot with One Box per Experiment
```{r}
# Create the box plot using ggplot2
box_plot <- morley |>
  ggplot(aes(x = Expt, y = Speed)) +
  geom_boxplot(fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Customize box plot colors
  labs(
    title = "Box Plot of Michelson's Speed-of-Light Measurements",
    x = "Experiment Number",
    y = "Speed (km/s minus 299,000)",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the box plot
print(box_plot)
```

## Inserting a Violin Plot into the Box Plot
```{r}
# Create the combined violin and box plot using ggplot2
combined_plot <- morley |>
  ggplot(aes(x = Expt, y = Speed)) +
  geom_violin(fill = "lightgreen", color = "darkgreen", alpha = 0.5) +  # Add violin plot
  geom_boxplot(width = 0.2, fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Add box plot
  labs(
    title = "Combined Violin and Box Plot of Michelson's Speed-of-Light Measurements",
    x = "Experiment Number",
    y = "Speed (km/s minus 299,000)",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the combined plot
print(combined_plot)
```

## Creating a Faceted Plot Displaying Histograms
```{r}
# Create the faceted histogram plot using ggplot2
faceted_histogram_plot <- morley |>
  ggplot(aes(x = Speed)) +
  geom_histogram(binwidth = 50, fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Add histograms
  facet_wrap(~ Expt, ncol = 2) +  # Create facets for each experiment
  labs(
    title = "Faceted Histograms of Michelson's Speed-of-Light Measurements",
    x = "Speed (km/s minus 299,000)",
    y = "Frequency",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12),  # Customize axis text
    strip.text = element_text(size = 12, face = "bold")  # Customize facet labels
  )

# Display the faceted histogram plot
print(faceted_histogram_plot)
```

## Discussion of the Plots
The combined violin and box plot provides the most comprehensive view of the data. It not only shows the distribution shape using the violin plot but also summarizes the central tendency and spread with the box plot. It is particularly useful for identifying outliers and understanding the density of measurements within each experiment.



# Reflection on the Use of GenAI (10%)
For this assessment, our team utilized ChatGPT (Generative AI) as a tool to assist with various tasks. The tool proved to be incredibly beneficial in several ways. First, it helped us brainstorm ideas for Exercise 2, where we needed to find a real-world dataset. ChatGPT suggested potential sources and criteria for selecting a suitable dataset, which saved us significant time. Additionally, it provided guidance on R syntax and tidyverse functions, especially for Exercise 1, where we had to manipulate and visualize EPL data. This was particularly helpful for debugging code and understanding how to structure the league table.

One of the most significant benefits of using GenAI was its ability to explain complex concepts in simple terms. For instance, when creating visualizations in Exercise 3, ChatGPT clarified the differences between box plots, violin plots, and histograms, helping us decide which plot would be most informative. It also provided examples of how to customize plots using ggplot2, which improved the quality of our visualizations.

However, there were challenges as well. While GenAI is powerful, it sometimes provided overly verbose or generic responses that required further refinement. For example, when generating R code, we often had to tweak the output to fit our specific dataset or requirements. Additionally, the tool occasionally lacked context awareness, leading to suggestions that were not entirely relevant to our tasks.

Overall, our experience with GenAI was positive. It served as a valuable assistant, enhancing our productivity and understanding of the material. That said, it is essential to use it critically and not rely solely on its outputs. We believe GenAI is a powerful tool for learning and problem-solving, but it works best when combined with human judgment and creativity.