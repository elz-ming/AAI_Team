---
title: "Week 10 Lab: Applications of Tidyverse Skills"
from: markdown+emoji
subtitle: AAI1001 -- Data Engineering and Visualization<br>AY24/25 Tri 2 (Assisted by GenAI)<br>Exercise 5 (Teamwork 2)
author:  
  name: Team [Insert your Team ID]
  affiliations: Singapore Institute of Technology
date: 2025-03-11
date-format: "dddd MMM D, YYYY"
format: 
  html: 
    toc: true
    toc-depth: 1
    toc-location: left
    number-sections: true
    number-depth: 3
    embed-resources: true
    html-table-processing: none
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(gt)
```


# Exercise 1: Converting Football Scores into a League Table (30%)


## Generating a League Table
```{r}
epl_results <- read_csv("epl_results.csv", show_col_types=FALSE) |>
  as_tibble()

epl_teams <- read_csv("epl_teams.csv", show_col_types=FALSE) |>
  as_tibble()
```


```{r}
library(dplyr)
library(tidyr)
library(readr)

# Read CSV files
epl_results <- read_csv("epl_results.csv", show_col_types = FALSE)
epl_teams <- read_csv("epl_teams.csv", show_col_types = FALSE)

# Convert match results to separate columns for home and away goals
epl_results_long <- epl_results %>%
  pivot_longer(-home_team, names_to = "away_team", values_to = "score") %>%
  separate(score, into = c("home_goals", "away_goals"), sep = "-", convert = TRUE)

# Compute match points
epl_results_long <- epl_results_long %>%
  mutate(
    home_points = case_when(
      home_goals > away_goals ~ 3,
      home_goals == away_goals ~ 1,
      TRUE ~ 0
    ),
    away_points = case_when(
      home_goals < away_goals ~ 3,
      home_goals == away_goals ~ 1,
      TRUE ~ 0
    )
  )

# Compute home and away statistics
home_stats <- epl_results_long %>%
  group_by(home_team) %>%
  summarise(
    points = sum(home_points, na.rm = TRUE),
    goals_scored = sum(home_goals, na.rm = TRUE),
    goals_conceded = sum(away_goals, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  rename(team = home_team)

away_stats <- epl_results_long %>%
  group_by(away_team) %>%
  summarise(
    points = sum(away_points, na.rm = TRUE),
    goals_scored = sum(away_goals, na.rm = TRUE),
    goals_conceded = sum(home_goals, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  rename(team = away_team)

# Combine home and away stats
total_stats <- full_join(home_stats, away_stats, by = "team", suffix = c("_home", "_away")) %>%
  mutate(
    points = points_home + points_away,
    goals_scored = goals_scored_home + goals_scored_away,
    goals_conceded = goals_conceded_home + goals_conceded_away,
    goal_diff = goals_scored - goals_conceded
  ) %>%
  select(team, points, goal_diff, goals_scored)

# Merge with team names
total_stats <- total_stats %>%
  left_join(epl_teams, by = c("team" = "abbr")) %>%
  select(name, points, goal_diff, goals_scored) %>%
  rename(team = name)

# Rank teams based on points, goal difference, and goals scored
epl_league_table <- total_stats %>%
  arrange(desc(points), desc(goal_diff), desc(goals_scored)) %>%
  mutate(rank = row_number()) %>%
  select(rank, team, points, goal_diff, goals_scored)

# Print the league table
epl_league_table
```



## Improving the Visualization Using gt Functions



# Exercise 2: Finding and Visualizing a Real-World Data Set (30%)
## Explanation of the Data Set
> The dataset `Resale Flat Prices (Based on Approval Date), 1990 - 1999.csv` entails Historical Resale HDB price.
Each row represents a single resale transaction, and each column represents an aspect of the resale transaction, including `year-month`, `town`, `flat type`, `storey range`, `flat model` etc. etc.
> The entire dataset has 200,000 rows of data between 1990 to 1999, of all locations in Singapore. For the purpose of this exercise, we are only looking at **Ang Mo Kio** HDBs in **1990**.

```{r}
resale_flats <- read.csv("ResaleFlatPrices/Resale Flat Prices (Based on Approval Date), 1990 - 1999.csv")
head(resale_flats)
```

## Validation of Conditions C, D, and E
> Condition C : At least 100 observations

```{r}
nrow(resale_flats)
```
> Condition D : At least 2 numeric variables

```{r}
head(
  resale_flats |>
  select(floor_area_sqm, resale_price)
)
```
> Condition E : At least one pair of identical / nearly-identical values

```{r}
duplicates <- resale_flats |>
  filter(town == "ANG MO KIO") |>  # Filter for Ang Mo Kio
  select(floor_area_sqm, resale_price) |>  # Keep relevant columns
  group_by(floor_area_sqm, resale_price) |>  
  summarise(count = n(), .groups = "drop") |>  # Count occurrences properly
  filter(count > 1) |>  # Keep only duplicates
  arrange(desc(count))  # Sort by highest count

duplicates
```



## Generating a Scatter Plot Using `geom_point()`
```{r}
# library(ggplot2)
# library(dplyr)
# 
# resale_flats <- read.csv("ResaleFlatPrices/Resale Flat Prices (Based on Approval Date), 1990 - 1999.csv")
# 
# # Display the structure of the dataset
# str(resale_flats)
# 
# # Check the number of observations
# num_observations <- nrow(resale_flats)
# cat("Number of observations:", num_observations, "\n")
# 
# # Scatter plot using geom_point()
# ggplot(resale_flats, aes(x = floor_area, y = resale_price)) +
#   geom_point() +
#   labs(
#     title = "Scatter Plot of Floor Area vs. Resale Price",
#     x = "Floor Area (sqm)",
#     y = "Resale Price (SGD)",
#     caption = "Data Source: Singapore Department of Statistics"
#   ) +
#   theme_minimal()

```



## Producing and Discussing Two Distinct Plots Designed to Mitigate Overplotting


## Creating Two Distinct Smoothing Interpolations



# Exercise 3: Visualizing Michelsonâ€™s Speed-of-Light Measurements (25%)
```{r}
data(morley)
morley <- as_tibble(morley)
morley
```


## Converting the `Expt` Column to a Factor
```{r}
# Load necessary libraries
library(dplyr)
library(tibble)

# Load the morley dataset
data(morley)

# Convert the dataset to a tibble
morley <- as_tibble(morley)

# Convert the Expt column to a factor
morley <- morley |>
  mutate(Expt = as.factor(Expt))

# Display the updated tibble
print(morley)
```


## Scatter Plot: Experiment Number versus Measured Speeds
```{r}
# Ensure Expt is a factor
morley <- morley |>
  mutate(Expt = as.factor(Expt))

# Create the scatter plot using ggplot2
scatter_plot <- morley |>
  ggplot(aes(x = Speed, y = Expt)) +
  geom_point(size = 3, alpha = 0.7, color = "blue") +  # Customize point size, transparency, and color
  labs(
    title = "Scatter Plot of Michelson's Speed-of-Light Measurements",
    x = "Speed (km/s minus 299,000)",
    y = "Experiment Number",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the scatter plot
print(scatter_plot)
```


## Creating a Box Plot with One Box per Experiment
```{r}
# Create the box plot using ggplot2
box_plot <- morley |>
  ggplot(aes(x = Expt, y = Speed)) +
  geom_boxplot(fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Customize box plot colors
  labs(
    title = "Box Plot of Michelson's Speed-of-Light Measurements",
    x = "Experiment Number",
    y = "Speed (km/s minus 299,000)",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the box plot
print(box_plot)
```

## Inserting a Violin Plot into the Box Plot
```{r}
# Create the combined violin and box plot using ggplot2
combined_plot <- morley |>
  ggplot(aes(x = Expt, y = Speed)) +
  geom_violin(fill = "lightgreen", color = "darkgreen", alpha = 0.5) +  # Add violin plot
  geom_boxplot(width = 0.2, fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Add box plot
  labs(
    title = "Combined Violin and Box Plot of Michelson's Speed-of-Light Measurements",
    x = "Experiment Number",
    y = "Speed (km/s minus 299,000)",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12)  # Customize axis text
  )

# Display the combined plot
print(combined_plot)
```

## Creating a Faceted Plot Displaying Histograms
```{r}
# Create the faceted histogram plot using ggplot2
faceted_histogram_plot <- morley |>
  ggplot(aes(x = Speed)) +
  geom_histogram(binwidth = 50, fill = "lightblue", color = "darkblue", alpha = 0.7) +  # Add histograms
  facet_wrap(~ Expt, ncol = 2) +  # Create facets for each experiment
  labs(
    title = "Faceted Histograms of Michelson's Speed-of-Light Measurements",
    x = "Speed (km/s minus 299,000)",
    y = "Frequency",
    caption = "Source: R dataset `morley`"
  ) +
  theme_minimal() +  # Use a minimal theme for a clean look
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Customize title
    axis.title = element_text(size = 14),  # Customize axis titles
    axis.text = element_text(size = 12),  # Customize axis text
    strip.text = element_text(size = 12, face = "bold")  # Customize facet labels
  )

# Display the faceted histogram plot
print(faceted_histogram_plot)
```

## Discussion of the Plots
The combined violin and box plot provides the most comprehensive view of the data. It not only shows the distribution shape using the violin plot but also summarizes the central tendency and spread with the box plot. It is particularly useful for identifying outliers and understanding the density of measurements within each experiment.



# Exercise 4: Reflection on the Use of GenAI (10%)
For this assessment, our team used DeepSeek and ChatGPT to assist with various tasks. These tools helped speed up our work and provided useful insights, especially for debugging R code and understanding statistical methods. We also used GitHub for collaboration, which made teamwork and version control more efficient.

The main benefit of GenAI was its ability to save us the time and effort used for recalling code syntax. Tasks like writing and debugging code were completed faster, and the tools offered clear explanations for unfamiliar concepts, such as ggplot2 and tidyverse syntax. This made it easier to learn while working.

However, there were some challenges. The tools occasionally provided generic solutions that needed adjustments to fit our specific needs. They also sometimes lacked domain-specific depth, requiring us to refine their outputs.

Overall, GenAI was a helpful resource. It allowed us to focus on higher-level problem-solving, but it worked best when combined with human judgment.